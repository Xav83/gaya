(* This file contains functions for working on dictionaries. *)

include "sequences"

(* Return a sequence over the keys of the provided dictionary. *)
dict.keys :: { dict: Dictionary => dict |> seq.map(_) { xs => xs(0) } }

(* Return a sequence over the values of the provided dictionary. *)
dict.values :: { dict: Dictionary => dict |> seq.map(_) { xs => xs(1) } }

(*
  Set the value for a given key in the provided dictionary, or a default value
  if the key is not found.

  The new value if computed from the old value by applying to it a
  transformation function.

  @param dict <dictionary> The dictionary.
  @param key <object> The key.
  @param valueFunc <function> The function to compute the new value.
  @param default <object> The default value in case the key is not found.
*)
dict.setdefault :: { dict: Dictionary, key, valueFunc: Function, default =>
  cases dict(key)
    given unit => dict.set(dict, key, default)
    given value => dict.set(dict, key, valueFunc(value))
  end
}
