(* Output: '' *)

include "dictionaries"

(* dict.length *)
discard dict.length((->)) |> assert(_ == 0)
discard dict.length((1 -> 2)) |> assert(_ == 1)
discard dict.length((1 -> 2, 1 -> 2)) |> assert(_ == 1)

(* dict.insert *)
discard (1 -> 2) |> dict.insert(_, 2, 3) |> assert(_ == (1 -> 2, 2 -> 3))
discard (->) |> dict.insert(_, 1, 2) |> assert(_ == (1 -> 2))
discard (* make sure the dict is mutated *)
  let d = (1 -> 2) in do
    discard dict.insert(d, 2, 3)
    assert(d == (1 -> 2, 2 -> 3))
  end
discard 
  (1 -> 2)
  |> dict.insert(_, "Hello", "World")
  |> assert(_ == (1 -> 2, "Hello" -> "World"))

(* dict.remove *)
discard (* This errors if the key is not in the dict. *)
  let d = (1 -> 2) in
  let v = dict.remove(d, 1) in do
    discard assert(v == 2) 
    discard assert(dict.length(d) == 0)
  end

(* dict.contains *)
discard (1 -> 2) |> dict.contains(_, 1) |> assert(_)
discard (->) |> dict.contains(_, 1) |> assert(not _)
discard ((42 -> 69) -> 7) |> dict.contains(_, (42 -> 69)) |> assert(_)

(* dict.keys *)
discard
  (1 -> 2, 3 -> 4, 5 -> 6)
  |> dict.keys(_)
  |> seq.toarray(_)
  |> assert(_ == (1, 3, 5))

(* dict.values *)
discard
  (1 -> 2, 3 -> 4, 5 -> 6)
  |> dict.values(_)
  |> seq.toarray(_)
  |> assert(_ == (2, 4, 6))
