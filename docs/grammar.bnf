program ::= stmts | e

stmts ::= stmt
        | stmt stmts

stmt ::= declaration_stmt
       | expression_stmt

declaration_stmt ::= IDENTIFIER '::' expression

expression_stmt ::= 'discard' expression

expression ::= let_expression
             | function_expression
             | do_expression
             | case_expression
             | comparison_expression
             | call_expression

let_expression ::= 'let' IDENTIFIER '=' expression 'in' expression

function_expression ::= '{' params_list '=>' expression '}'
            
params_list ::= IDENTIFIER
              | IDENTIFIER ',' params_list

do_expression ::= 'do' discards_and_expression 'done'

discards_and_expression ::= expression
                          | expression_stmt discards_and_expression

case_expression ::= 'case' case_branches 'end'
                  | 'case' case_branches case_otherwise 'end'

case_branches ::= case_branch
                | case_branch case_branches

case_branch ::= 'given' expression '=>' expression

case_otherwise ::= 'otherwise' '=>' expression 

comparison_expression ::= call_expression '<' call_expression
                        | call_expression '>' call_expression
                        | call_expression '<=' call_expression
                        | call_expression '>=' call_expression
                        | call_expression '==' call_expression
                        | call_expression

call_expression ::= primary_expression '(' params_list ')'
                  | primary_expression

args_list ::= expression
            | expression ',' args_list

primary_expression ::= NUMBER
                     | IDENTIFIER
                     | STRING
                     | UNIT
