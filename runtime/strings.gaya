(* This file contains functions to work on strings. *)

include "base"
include "sequences"

(* Return whether the provided string is empty or not. *)
string.isempty :: { s => string.length(s) == 0 }

(* Return the first character in a string, or unit if empty. *)
string.first :: { s =>
  cases
    given typeof(s) == "string" and not string.isempty(s) => 
      s(0)
  end
}

(* Return the last character in a string, or unit if empty. *)
string.last :: { s =>
  cases
    given typeof(s) == "string" and not string.isempty(s) =>
      s(string.length(s) - 1)
  end
}

(* Return whether the provided pattern is contained in s. *)
string.contains :: { s, pattern => string.index(s, pattern) /= unit }

(* Splits a string on the given pattern and returns a sequence over the parts. 
  @param s <string> The string to split.
  @param pattern <string> The pattern to split the string on. *)
string.split :: { s: String, pattern: String =>
  cases 
    given string.isempty(pattern) => tosequence(s) |> seq.toarray(_)
    otherwise => 
      let i = 0, j = 0 in seq.make { =>
        let found = false, result = unit in do
          while i < string.length(s) and not found
            cases
              given string.startswith(s, pattern, i) => do
                result <- string.substring(s, j, i)
                found <- true
                i <- i + string.length(pattern)
                j <- i
              end
              otherwise => perform i <- i + 1
            end.
          end
          cases
            given result /= unit => result
            given i == string.length(s) => do
              i <- i + 1
              string.substring(s, j, i - 1)
            end
          end
        end
      }
  end
}

(*
  Like string.split, but return an array instead of a sequence.
  @param s <string> The string to split.
  @param pattern <string> The pattern to split the string on
*)
string.splitArray :: { s, pattern =>
  s
  |> string.split(_, pattern)
  |> seq.toarray(_)
}

(* Return whether a string is a whitespace character.
  @param s <string> The string to test. *)
string.iswhitespace :: { s => s == " " or s == "\n" or s == "\t" }
