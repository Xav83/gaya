(* This file contains functions for working on sequences. *)

include "base"
include "functions"

(*
  Call the provided function for each element in the sequence, discarding
  the results.
  @param s <sequence> A sequence.
  @param f <function> A function to call on every element in the sequence.
 *)
seq.foreach :: { s, f => do
    s |> issequence(_) |> assert(_).
    let xs = tosequence(s), next = seq.next(xs) in perform
    while next /= unit : next <- seq.next(xs)
      f(next).
    end
  end
}

(* 
  Reduce the provided sequence according to the specified accumulator function,
  using the given initial element. Return the initial element if the sequence
  was empty.
  @param s <sequence> A sequence.
  @param init <object> The initial element.
  @param f <function> The accumulator function.
 *)
seq.reduce :: { s, init, f => do
    s |> issequence(_) |> assert(_).
    let acc = init, xs = tosequence(s), next = seq.next(xs) in do
      while next /= unit : next <- seq.next(xs)
        acc <- f(acc, next)
      end

      acc
    end
  end
}

(*
  Return true if any element in the provided sequence
  satisfies the given predicate. 
*)
seq.any :: { xs, pred => do
  xs |> issequence(_) |> assert(_).
  let xs = tosequence(xs), 
      x = seq.next(xs),
      found = false, 
   in do
      while x /= unit and not found 
        found <- pred(x)
        x <- seq.next(xs)
      end

      found
    end
  end
}

(*
  Returns whether all the elements in the provided sequence satifsy
  the given predicate.
*)
seq.all :: { xs, pred => do
    xs |> issequence(_) |> assert(_).
    let xs = tosequence(xs),
        x = seq.next(xs),
        success = true
     in do
        while x /= unit and success : x <- seq.next(xs)
          success <- pred(x)
        end

        success
    end
  end
}

(*
  Return the greatest element in a sequence according to the '>' operator.
  If the sequence is empty, unit is returned.
  @param xs <sequence> The sequence.
*)
seq.max :: { xs => do
  xs |> issequence(_) |> assert(_).
  let xs = tosequence(xs),
      next = seq.next(xs),
      max = next
   in do
        while next /= unit : next <- seq.next(xs)
          max <- fn.max(max, next)
        end

        max
      end
  end
}

(*
  Return the least element in a sequence according to the '<' operator.
  If the sequence is empty, unit is returned.
  @param xs <sequence> The sequence.
*)
seq.min :: { xs => do
  xs |> issequence(_) |> assert(_).
  let xs = tosequence(xs),
      next = seq.next(xs),
      min = next
   in do
        while next /= unit : next <- seq.next(xs)
          min <- fn.min(min, next)
        end

        min
      end
  end
}

(*
  Return an array containing the least and greatest elements in a sequence
  according to the '<' and '>' operators respectively. 
  If the sequence is empty, unit is returned.
  @param xs <sequence> The sequence.
*)
seq.minmax :: { xs => do
  xs |> issequence(_) |> assert(_).
  let xs = tosequence(xs),
      next = seq.next(xs),
      min = next,
      max = next
   in do
        while next /= unit : next <- seq.next(xs)
          max <- fn.max(max, next)
          min <- fn.min(min, next)
        end

        cases (min, max)
          given (unit, unit) => unit
          given a            => a
        end
      end
  end
}

(*
  Return a new sequence that maps the given function over the elements of the
  provided sequence. 
*)
seq.map :: { s, func => do
    s |> issequence(_) |> assert(_).
    let xs = tosequence(s) in seq.make { =>
      let next = seq.next(xs) in
      cases 
        given next /= unit => func(next)
      end
    }
  end
}

(*
  Like map, but the callback function additionally receives the element index
  as its first argument.
  @param xs <sequence> The sequence.
  @param func <function> The transformation function.
*)
seq.mapWithIndex :: { xs, func => do
    xs |> issequence(_) |> assert(_).
    let xs = tosequence(xs), i = 0 in
    seq.make { =>
      let next = seq.next(xs) in
      cases 
        given next /= unit =>
        let result = func(i, next) in do
          i <- i + 1
          result
        end
      end
    }
  end
}

(*
  Return a new sequence that filters out elements for which the provided
  predicate function returns false.
*)
seq.filter :: { xs, func => do
    xs |> issequence(_) |> assert(_).
    let xs = tosequence(xs) in seq.make { => 
      let x = seq.next(xs) in do
        while x /= unit and not func(x)
          x <- seq.next(xs)
        end

        x
      end
    }
  end
}

(*
  Return a new sequence that applies the provided function to the elements of
  the given sequence in a pairwise manner.
*)
seq.zip :: { xs, ys, func => do
    xs |> issequence(_) |> assert(_).
    ys |> issequence(_) |> assert(_).
    let xs = tosequence(xs), ys = tosequence(ys) in seq.make { =>
      let x = seq.next(xs), y = seq.next(ys) in
      cases 
        given x /= unit and y /= unit => func(x, y)
      end
    }
  end
}

(*
  Return a sequence that takes elements from the input sequences as long as
  they satisfy the given predicate.
*)
seq.takewhile :: { xs, pred => do
    xs |> issequence(_) |> assert(_).
    let xs = tosequence(xs) in seq.make { =>
      let x = seq.next(xs) in
      cases
        given pred(x) => x
      end
    }
  end
}

(* Return a sequence that takes the first n elements of the provided one. *)
seq.take :: { xs, n => do
    xs |> issequence(_) |> assert(_).
    let xs = tosequence(xs), i = 0 in seq.make { =>
      cases
        given i < n => do
          i <- i + 1
          seq.next(xs)
        end
      end
    }
  end
}

(*
  Return a sequence that drops elements from the input sequence as long as they
  satisfy the given predicate.
*)
seq.dropwhile :: { xs, pred => do
    xs |> issequence(_) |> assert(_).
    let xs = tosequence(xs), predicateFailed = false in seq.make { =>
      let x = seq.next(xs) in do
        while x /= unit and not predicateFailed
          cases
            given pred(x) => perform x <- seq.next(xs) 
            otherwise     => perform predicateFailed <- true
          end.
        end

        x
      end
    }
  end
}

(* Return a new sequence that drops the first n elements of the provided one. *)
seq.drop :: { xs, n => do
    xs |> issequence(_) |> assert(_).
    let xs = tosequence(xs), i = 1, x = seq.next(xs) in seq.make { => do
        while i < n : i <- i + 1
          x <- seq.next(xs)
        end
        
        seq.next(xs)
      end
    }
  end
}

(*
  Create a sequence that yields the numbers from start inclusive to end
  exclusive.
*)
seq.range :: { start, finish => do
    assert(typeof(start) == "number" and typeof(finish) == "number").
    let i = start in seq.make { =>
      cases
        given i < finish =>
          let previous = i in do
            i <- i + 1
            previous
        end
      end
    }
  end
}

(* 
  Return a sequence that yields 2 element arrays where the first element is the
  index of the second element from the provided sequence.
*)
seq.enumerate :: { xs => do
    xs |> issequence(_) |> assert(_).
    let xs = tosequence(xs), i = 0 in seq.make { =>
      let x = seq.next(xs), pair = (i, x) in 
      cases
        given x /= unit => do
          i <- i + 1
          pair
        end
      end
    }
  end
}

(* Return an array with the elements of the provided sequence. *)
seq.toarray :: { xs => do
    xs |> issequence(_) |> assert(_).
    let xs = tosequence(xs), x = seq.next(xs), ary = () in do
      while x /= unit : x <- seq.next(xs)
        array.push(ary, x).
      end

      ary
    end
  end
}

(*
  Return a string with the elements of the provided sequence. 

  `tostring` is called on every element of the sequence to transform it to a
  string.
*)
seq.tostring :: { xs => do
    xs |> issequence(_) |> assert(_).
    let xs = tosequence(xs), x = seq.next(xs), s = "" in do
      while x /= unit : x <- seq.next(xs)
        s <- x |> tostring(_) |> string.concat(s, _)
      end

      s
    end
  end
}

(*
  Return the sum of the numbers in the provided sequence.

  This function consumes the provided sequence.
  @param xs <sequence> The sequence.
*)
seq.sum :: { xs => seq.reduce(xs, 0, fn.add) }

(*
  Return the number of elements in a sequence.

  This function consumes the provided sequence.
  @param xs <sequence> The sequence.
*)
seq.count :: { xs => do
    assert(issequence(xs)).
    let count = 0,
        xs = tosequence(xs),
        x = seq.next(xs) in do
      while x /= unit : x <- seq.next(xs)
        count <- count + 1
      end

      count
    end
  end
}

(*
  Return the first element in the sequence, or unit if there are none.
  @param xs <sequence> The sequence.
*)
seq.first :: { xs => do
    assert(issequence(xs)).
    let xs = tosequence(xs) in seq.next(xs)
  end
}
