(* Output: '' *)

include "dictionaries"

(* dict.length *)
dict.length((->)) |> assert(_ == 0).
dict.length((1 -> 2)) |> assert(_ == 1).
dict.length((1 -> 2, 1 -> 2)) |> assert(_ == 1).

(* dict.set *)
(1 -> 2) |> dict.set(_, 2, 3) |> assert(_ == (1 -> 2, 2 -> 3)).
(->) |> dict.set(_, 1, 2) |> assert(_ == (1 -> 2)).
(* make sure the dict is mutated *)
let d = (1 -> 2) in do
  dict.set(d, 2, 3).
  assert(d == (1 -> 2, 2 -> 3))
end.

(1 -> 2)
  |> dict.set(_, "Hello", "World")
  |> assert(_ == (1 -> 2, "Hello" -> "World")).

(* dict.remove *)
(* This errors if the key is not in the dict. *)
let d = (1 -> 2) in
let v = dict.remove(d, 1) in do
  assert(v == 2) .
  assert(dict.length(d) == 0).
end.

(* dict.contains *)
(1 -> 2) |> dict.contains(_, 1) |> assert(_).
(->) |> dict.contains(_, 1) |> assert(not _).
((42 -> 69) -> 7) |> dict.contains(_, (42 -> 69)) |> assert(_).

(* dict.keys *)
(1 -> 2, 3 -> 4, 5 -> 6)
  |> dict.keys(_)
  |> seq.toarray(_)
  |> assert(_ == (1, 3, 5)).

(* dict.values *)
(1 -> 2, 3 -> 4, 5 -> 6)
  |> dict.values(_)
  |> seq.toarray(_)
  |> assert(_ == (2, 4, 6)).

(* dict.setdefault *)
(->)
  |> dict.setdefault(_, 1, { n => n + 1 }, 2)
  |> assert(_ == (1 -> 2)).

(1 -> 2)
  |> dict.setdefault(_, 1, { n => n + 1}, 69)
  |> assert(_ == (1 -> 3)).
