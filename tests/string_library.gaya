include "strings"
include "sequences"

(* startswith *)
assert(string.startswith("Gaya", "Ga", 0)).
assert(not string.startswith("Gaya", "ya", 0)).

(* endswith *)
assert(string.endswith("Gaya", "ya")).
assert(not string.endswith("Gaya", "Ga")).

(* concat *)
assert(string.concat("Ga", "ya") == "Gaya").
assert(string.concat("Ga", "") == "Ga").

(* index *)
assert(string.index("Gaya", "ya") == 2).
assert(string.index("Gaya", "Ga") == 0).
assert(string.index("Gaya", "Gata") == unit).

(* contains *)
assert(string.contains("Gaya", "ya")).
assert(string.contains("Gaya", "Ga")).
assert(not string.contains("Gaya", "Gata")).

(* substring *)
assert(string.substring("Gaya", 0, 3) == "Gay").
assert(string.substring("Gaya", 0, 4) == "Gaya").
assert(string.substring("Gaya", -1, 4) == unit).
assert(string.substring("Gaya", 4, 0) == unit).

(* split *)
string.split("Hello\nGaya\n!", "\n")
  |> seq.toarray(_)
  |> assert(_ == ("Hello", "Gaya", "!")).

string.split("Hello World!", "\n")
  |> seq.toarray(_)
  |> assert(_ == ("Hello World!")).

string.split(" Hello World! ", " ") 
  |> seq.toarray(_)
  |> assert(_ == ("", "Hello", "World!", "")).

string.split("Hello\nWorld\n", "\n")
  |> seq.toarray(_)
  |> assert(_ == ("Hello", "World", "")).

(* trim *)
string.trim("  \n\t  Hello   ") |> assert(_ == "Hello").
string.trim("    \n\tHello") |> assert(_ == "Hello").
string.trim("Hello  \n\t") |> assert(_ == "Hello").

(* tonumber *)
string.tonumber("42") |> assert(_ == 42).
string.tonumber("Gaya") |> assert(_ == unit).

(* string.splitArray *)
string.splitArray("Hello", "") |> assert(_ == ("H", "e", "l", "l", "o")).
string.splitArray("Hello World !", " ") |> assert(_ == ("Hello", "World", "!")).
