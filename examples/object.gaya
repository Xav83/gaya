(* Output: 'Gaya\nGaya\nDoes not understand\nGaya' *)

(* Take 1: Using a closure. *)
Person :: { name =>
  { msg =>
    cases
      given msg == "getName" => name
      given msg == "print"   => io.println(name)
      otherwise              => io.println("Does not understand")
    end
  }
}

p :: Person("Gaya")

"getName" |> p(_) |> io.println(_).
"print" |> p(_).
"someOtherMessage" |> p(_).

(* Take 2: Using a dict with functions. *)
Person :: { name =>
  (* We can't handle receiving unwanted messages. *)
  ( "getName" -> name
  , "print" -> { => io.println(name) }
  )
}


p :: Person("Gaya")

p("getName") |> assert(_ == "Gaya").
p("print")().
p("someOtherMessage") |> assert(_ == unit).
