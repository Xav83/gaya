(* Output: '(5, 7, 9)\n(3)\n(3)\n()' *)

include "sequences"
include "functions"
include "strings"

(* seq.zip *)
(1, 2, 3)
  |> tosequence(_)
  |> seq.zip(_, (4, 5, 6), fn.add)
  |> io.println(_).

(* seq.filter works outside of pipeline *)
let xs = (1, 2, 3, 4) in
let ss = seq.filter(xs, { x => x < 4 }) in
let ss = seq.filter(ss, { x => x > 2 }) in
io.println(ss).

(* seq.filter can be applied twice *)
(1, 2, 3, 4)
  |> tosequence(_)
  |> seq.filter(_, { x => x < 4 })
  |> seq.filter(_, { x => x > 2 })
  |> io.println(_).

(* seq.filter *)
(1, 2, 3, 4)
  |> tosequence(_)
  |> seq.filter(_, { x => x < 1 })
  |> io.println(_).

(* seq.map and seq.filter *)
(1, 2, 3, 4)
  |> seq.map(_, { x => x + 1 })
  |> seq.filter(_, { x => x < 3 })
  |> seq.toarray(_)
  |> assert(_ == (2)).

(* seq.takewhile and seq.dropwhile *)
(1, 2, 3, 4)
  |> seq.takewhile(_) { x => x < 4 }
  |> seq.dropwhile(_) { x => x < 2 }
  |> seq.toarray(_)
  |> assert(_ == (2, 3)).

(* seq.dropwhile *)
"  Hello  "
  |> seq.dropwhile(_, string.iswhitespace)
  |> seq.tostring(_)
  |> assert(_ == "Hello  ").

(* seq.takewhile *)
"Hello   world"
  |> seq.takewhile(_) { c => not string.iswhitespace(c) }
  |> seq.tostring(_)
  |> assert(_ == "Hello").

(* seq.drop *)
"  Hello, world!"
  |> seq.drop(_, 2)
  |> seq.tostring(_)
  |> assert(_ == "Hello, world!").

(* seq.take *)
"Hello, world!  "
  |> seq.take(_, string.length("Hello, world!"))
  |> seq.tostring(_)
  |> assert(_ == "Hello, world!").

"Hello, Gaya!"
  |> seq.take(_, 0)
  |> seq.tostring(_)
  |> string.isempty(_)
  |> assert(_).

(* seq.range *)
seq.range(1, 1000000)
  |> seq.take(_, 10)
  |> seq.reduce(_, 0) { acc, x => acc + x}
  |> assert(_ == 55).

(* seq.any *)
seq.range(1, 10)
  |> seq.any(_) { x => x == 5 }
  |> assert(_).

(1, 2, 3, 5)
  |> seq.any(_) { x => x == 4 }
  |> assert(not _).

("Hello", 42, (1 -> 2))
  |> seq.any(_) { x => typeof(x) == "Dictionary" }
  |> assert(_).

(* seq.all *)
seq.range(1, 10)
  |> seq.all(_) { x => typeof(x) == "Number" }
  |> assert(_).

(1, 2, 3, "Hola")
  |> seq.all(_) { x => typeof(x) == "Number" }
  |> assert(not _).

(* seq.enumerate *)
"Gaya"
  |> seq.enumerate(_)
  |> seq.toarray(_)
  |> assert(_ == ((0, "G"), (1, "a"), (2, "y"), (3, "a"))).

(* seq.max *)
(1, 3, 2) |> seq.max(_) |> assert(_ == 3).
(4, 1, 2) |> seq.max(_) |> assert(_ == 4).
(1, 2, 4) |> seq.max(_) |> assert(_ == 4).
() |> seq.max(_) |> assert(_ == unit).

(* seq.min *)
(1, 3, 2) |> seq.min(_) |> assert(_ == 1).
(4, 1, 2) |> seq.min(_) |> assert(_ == 1).
(4, 2, 1) |> seq.min(_) |> assert(_ == 1).
() |> seq.min(_) |> assert(_ == unit).

(* seq.minmax *)
() |> seq.minmax(_) |> assert(_ == unit).
(1, 3, 2) |> seq.minmax(_) |> assert(_ == (1, 3)).
(1) |> seq.minmax(_) |> assert(_ == (1, 1)).
(2, 1) |> seq.minmax(_) |> assert(_ == (1, 2)).

(* seq.sum *)
(1, 2, 3) |> seq.sum(_) |> assert(_ == 6).
() |> seq.sum(_) |> assert(_ == 0).

(* seq.count *)
(1, 2, 3) |> seq.count(_) |> assert(_ == 3).
() |> seq.count(_) |> assert(_ == 0).
"Hello" |> seq.count(_) |> assert(_ == 5).

(* seq.inits & seq.tails & seq.concatMap & seq.flatten *)

(* seq.flatten *)
((1, 2), (3, 4))
  |> seq.flatten(_)
  |> seq.toarray(_)
  |> assert(_ == (1, 2, 3, 4)).

()
  |> seq.flatten(_)
  |> seq.toarray(_)
  |> assert(_ == ()).

(* seq.concatMap *)
(1, 2, 3)
  |> seq.concatMap(_) { n => (n, tostring(n)) }
  |> seq.toarray(_)
  |> assert(_ == (1, "1", 2, "2", 3, "3")).

()
  |> seq.concatMap(_) { x => x }
  |> seq.toarray(_)
  |> assert(_ == ()).

(* seq.inits *)
(1, 2, 3)
  |> seq.inits(_)
  |> seq.flatten(_)
  |> seq.toarray(_)
  |> assert(_ == (1, 1, 2, 1, 2, 3)).

() 
  |> seq.inits(_) 
  |> seq.flatten(_)
  |> seq.toarray(_)
  |> assert(_ == ()).

(* seq.tails *)
(1, 2, 3)
  |> seq.tails(_)
  |> seq.flatten(_)
  |> seq.toarray(_)
  |> assert(_ == (1, 2, 3, 2, 3, 3)).

()
  |> seq.tails(_)
  |> seq.flatten(_)
  |> seq.toarray(_)
  |> assert(_ == ()).

(1, 2, 3)
  |> seq.inits(_)
  |> seq.concatMap(_, seq.tails)
  |> seq.flatten(_)
  |> seq.toarray(_)
  |> assert(_ == (1, 1, 2, 2, 1, 2, 3, 2, 3, 3)).
