(* This file contains functions to work on strings. *)

include "base"

(* Return whether the provided string is empty or not. *)
string.isempty :: { s => string.length(s) == 0 }

(* Return the first character in a string, or unit if empty. *)
string.first :: { s =>
  cases
    given typeof(s) == "string" and not string.isempty(s) => 
      s(0)
  end
}

(* Return the last character in a string, or unit if empty. *)
string.last :: { s =>
  cases
    given typeof(s) == "string" and not string.isempty(s) =>
      s(string.length(s) - 1)
  end
}

(* Return whether the provided pattern is contained in s. *)
string.contains :: { s, pattern => string.index(s, pattern) /= unit }

(* Splits a string on the given pattern and returns a sequence over the parts. 
  @param s <string> The string to split.
  @param pattern <string> The pattern to split the string on. *)
string.split :: { s, pattern =>
  let i = 0, j = 0 in seq.make { =>
    let found = false, result = unit in do
      while i < string.length(s) and not found
        discard let substr = string.substring(s, i, string.length(s)) in
        cases
          given string.startswith(substr, pattern) => do
            result <- string.substring(s, j, i)
            found <- true
            i <- i + string.length(pattern)
            j <- i
          end
          otherwise => perform i <- i + 1
        end
      end
      cases
        given result /= unit => result
        given i == string.length(s) => do
          i <- i + 1
          string.substring(s, j, i - 1)
        end
      end
    end
  }
}

(* Return whether a string is a whitespace character.
  @param s <string> The string to test. *)
string.iswhitespace :: { s => s == " " or s == "\n" or s == "\t" }

(* Return a new string that is the result of trimming the leading and trailing
  whitespace from the provided string. 
  @param s <string> The string to trim. *)
string.trim :: { s =>
  let start = 0, finish = string.length(s) - 1 in do
    while string.iswhitespace(s(start)) and start < string.length(s)
      start <- start + 1
    end
    
    while string.iswhitespace(s(finish)) and finish > start
      finish <- finish - 1
    end

    string.substring(s, start, finish + 1)
  end
}
