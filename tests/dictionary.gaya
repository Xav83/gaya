(* Output: '(1 -> "Hello", "Hello" -> 1)\n(->)' *)

include "base"
include "sequences"
include "arrays"
include "functions"

(* testing to_string *)
io.println((1 -> "Hello", "Hello" -> 1)).
io.println((->)).

(* typeof dict is dictionary *)
typeof((->)) |> assert(_ == "Dictionary").

(* empty dicts are considered false *)
cases 
  given (->) => assert(false)
end.

(* non-empty dicts are considered true *)
cases 
  given (1 -> 2) => assert(true)
  otherwise      => assert(false)
end.

(* dicts can be compared for equality *)
assert((1 -> 2) == (1 -> 2)).

(* strings can be used as keys in dicts *)
("Hello" -> "World")("Hello") |> assert(_ == "World").

(* dicts can be used as keys in dicts *)
((42 -> 69) -> "Hello")((42 -> 69)) |> assert(_ == "Hello").

(* arrays can be used as keys in dicts *)
((1, 2, 3) -> "Hello")(array.range(1, 4)) |> assert(_ == "Hello").

(* works as a sequence *)
(1 -> 2, 2 -> 3, 3 -> 4)
  |> seq.map(_) { xs => xs(0) + xs(1) }
  |> seq.reduce(_, 0, fn.add)
  |> assert(_ == 15).
