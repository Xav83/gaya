(* Output: '1\n0\n1\n0\nGaya\nGa\n2\n0\nunit\n1\n1\n0\nGay\nGaya\nunit\nunit\n' *)

include "strings"
include "sequences"

(* startswith *)
io.println(string.startswith("Gaya", "Ga")).
io.println(string.startswith("Gaya", "ya")).

(* endswith *)
io.println(string.endswith("Gaya", "ya")).
io.println(string.endswith("Gaya", "Ga")).

(* concat *)
io.println(string.concat("Ga", "ya")).
io.println(string.concat("Ga", "")).

(* index *)
io.println(string.index("Gaya", "ya")).
io.println(string.index("Gaya", "Ga")).
io.println(string.index("Gaya", "Gata")).

(* contains *)
io.println(string.contains("Gaya", "ya")).
io.println(string.contains("Gaya", "Ga")).
io.println(string.contains("Gaya", "Gata")).

(* substring *)
io.println(string.substring("Gaya", 0, 3)).
io.println(string.substring("Gaya", 0, 4)).
io.println(string.substring("Gaya", -1, 4)).
io.println(string.substring("Gaya", 4, 0)).

(* split *)
string.split("Hello\nGaya\n!", "\n")
  |> seq.toarray(_)
  |> assert(_ == ("Hello", "Gaya", "!")).

string.split("Hello World!", "\n")
  |> seq.toarray(_)
  |> assert(_ == ("Hello World!")).

string.split(" Hello World! ", " ") 
  |> seq.toarray(_)
  |> assert(_ == ("", "Hello", "World!", "")).

string.split("Hello\nWorld\n", "\n")
  |> seq.toarray(_)
  |> assert(_ == ("Hello", "World", "")).

(* trim *)
string.trim("  \n\t  Hello   ") |> assert(_ == "Hello").
string.trim("    \n\tHello") |> assert(_ == "Hello").
string.trim("Hello  \n\t") |> assert(_ == "Hello").

(* tonumber *)
string.tonumber("42") |> assert(_ == 42).
string.tonumber("Gaya") |> assert(_ == unit).
