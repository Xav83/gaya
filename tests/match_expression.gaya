test1 :: { n => 
  cases n
    given 42  => "life"
    given 69  => "nice"
    otherwise => "dunno"
  end
}

test2 :: { n =>
  cases n
    given x when x == 42 => "life"
    given x when x == 69 => "nice"
    otherwise            => "dunno"
  end
}

test3 :: { n =>
  cases n
    given _ when n == 42 => "life"
    given _ when n == 69 => "nice"
    given _              => "dunno"
  end
}

test4 :: { n =>
  cases n
    given x when x == 42 => "life is " <> x
    otherwise => "life is worthless"
  end
}

test5 :: { xs =>
  cases xs
    given (42, _) => "life"
    given (69, _) => "nice"
    given (x, y)  => "It was " <> x <> " and " <> y
  end
}

test6 :: { xs =>
  cases xs
    given (x, _, (42, 69)) => x
    given ((42, 69), y, _) => y
    otherwise              => "dunno"
  end
}

assert(test1(42) == "life").
assert(test1(69) == "nice").
assert(test1(15) == "dunno").

assert(test2(42) == "life").
assert(test2(69) == "nice"). assert(test2(15) == "dunno").
assert(test3(42) == "life").
assert(test3(69) == "nice").
assert(test3(15) == "dunno").

assert(test4(42) == "life is 42").
assert(test4(69) == "life is worthless").

assert(test5((42, 69)) == "life").
assert(test5((69, 42)) == "nice").
assert(test5((1, 2)) == "It was 1 and 2").

assert(test6((42, 69, (42, 69))) == 42).
assert(test6(((42, 69), 69, 42)) == 69).
assert(test6(42) == "dunno").

test7 :: { x => 
  cases x
    given whole@(x, y) => whole
    given num@42 => num + 1
    given str@"42" => str <> "!"
    given y@z => tostring(y) <> " & " <> z
  end
}

assert(test7((1, 2)) == (1, 2)).
assert(test7(42) == 43).
assert(test7("42") == "42!").
assert(test7(69) == "69 & 69").
