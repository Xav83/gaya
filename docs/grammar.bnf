program ::= stmts | e

stmts ::= toplevel_stmt
        | toplevel_stmt stmts

toplevel_stmt ::= declaration_stmt 
                | expression_stmt

declaration_stmt ::= IDENTIFIER '::' expression

expression_stmt ::= expression '.'

expression ::= do_expression
             | case_expression
             | logical_expression

let_expression ::= 'let' IDENTIFIER '=' expression 'in' expression

function_expression ::= '{' params_list '=>' expression '}'
            
params_list ::= IDENTIFIER
              | IDENTIFIER ',' params_list

do_expression ::= 'do' local_stmts 'end'
                | 'do' local_stmts expression 'end'

local_stmts ::= local_stmt
              | local_stmt local_stmts

local_stmt ::= expression_stmt 
             | assignment_stmt
             | while_stmt
             | for_in_stmt

assignment_stmt ::= IDENTIFIER '<-' expression

while_stmt ::= 'while' expression local_stmts 'end'
             | 'while' expression ':' local_stmt local_stmts 'end'

for_in_stmt ::= 'for' IDENTIFIER 'in' expression local_stmts 'end'

case_expression ::= 'cases' case_branches 'end'
                  | 'cases' case_branches case_otherwise 'end'

case_branches ::= case_branch
                | case_branch case_branches

case_branch ::= 'given' expression '=>' expression

case_otherwise ::= 'otherwise' '=>' expression 

match_expression ::= 'cases' expression match_branches 'end'
                   | 'cases' expression match_branches match_otherwise 'end'

match_branches ::= match_branch match_branches
                 | match_branch

match_branches ::= 'given' match_pattern '=>' expression
                 | 'given' match_pattern 'when' expression '=>' expression

match_pattern ::= '_' | IDENTIFIER | expression | array_pattern

array_pattern ::= '(' match_patterns ')'

match_patterns ::= match_pattern ',' match_patterns
                 | match_pattern

match_otherwise ::= 'otherwise' '=>' expression

logical_expression ::= comparison_expression 'and' comparison_expression
                     | comparison_expression 'or' comparison_expression
                     | comparison_expression

comparison_expression ::= pipe_expression '<' pipe_expression
                        | pipe_expression '>' pipe_expression
                        | pipe_expression '<=' pipe_expression
                        | pipe_expression '>=' pipe_expression
                        | pipe_expression '==' pipe_expression
                        | pipe_expression

pipe_expression ::= bitwise_expression '|>' bitwise_expression

bitwise_expression ::= term_expression '^' term_expression
                     | term_expression '&' term_expression
                     | term_expression '|' term_expression
                     | term_expression '<<' term_expression
                     | term_expression '>>' term_expression

term_expression ::= factor_expression '+' factor_expression
                  | factor_expression '-' factor_expression
                  | factor_expression '<>' factor_expression
                  | factor_expression

factor_expression ::= unary_expression '*' unary_expression
                    | unary_expression '/' unary_expression
                    | unary_expression

unary_expression ::= 'not' call_expression
                   | 'perform' call_expression
                   | '~' call_expression

call_expression ::= primary_expression '(' args_list ')'
                  | primary_expression

args_list ::= expression
            | expression ',' args_list

primary_expression ::= NUMBER
                     | IDENTIFIER
                     | STRING
                     | UNIT
                     | PLACEHOLDER
                     | let_expression
                     | function_expression
                     | array
                     | dict

array ::= '(' array_elems ')'

array_elems ::= expression ',' array_elems
              | expression

dict ::= '(' dict_elems ')' 
       | empty_dict

empty_dict ::= '(' '->' ')'

dict_elems ::= dict_pair ',' dict_elems
             | dict_pair

dict_pair ::= expression '->' expression
