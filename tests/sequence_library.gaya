(* Output: '(5, 7, 9)\n(3)\n(3)\n()' *)

(* seq.zip *)
discard
  (1, 2, 3)
  |> tosequence(_)
  |> seq.zip(_, (4, 5, 6), math.add)
  |> io.println(_)

(* seq.filter works outside of pipeline *)
discard 
  let xs = (1, 2, 3, 4) in
  let ss = seq.filter(xs, { x => x < 4 }) in
  let ss = seq.filter(ss, { x => x > 2 }) in
  io.println(ss)

(* seq.filter can be applied twice *)
discard
  (1, 2, 3, 4)
  |> tosequence(_)
  |> seq.filter(_, { x => x < 4 })
  |> seq.filter(_, { x => x > 2 })
  |> io.println(_)

(* seq.filter *)
discard 
  (1, 2, 3, 4)
  |> tosequence(_)
  |> seq.filter(_, { x => x < 1 })
  |> io.println(_)

(* seq.map and seq.filter *)
discard
  (1, 2, 3, 4)
  |> seq.map(_, { x => x + 1 })
  |> seq.filter(_, { x => x < 3 })
  |> seq.toarray(_)
  |> assert(_ == (2))

(* seq.takewhile and seq.dropwhile *)
discard 
  (1, 2, 3, 4)
  |> seq.takewhile(_) { x => x < 4 }
  |> seq.dropwhile(_) { x => x < 2 }
  |> seq.toarray(_)
  |> assert(_ == (2, 3))

(* seq.dropwhile *)
discard 
  "  Hello  "
  |> seq.dropwhile(_, string.iswhitespace)
  |> seq.tostring(_)
  |> assert(_ == "Hello  ")

(* seq.takewhile *)
discard 
  "Hello   world"
  |> seq.takewhile(_) { c => not string.iswhitespace(c) }
  |> seq.tostring(_)
  |> assert(_ == "Hello")

(* seq.drop *)
discard 
  "  Hello, world!"
  |> seq.drop(_, 2)
  |> seq.tostring(_)
  |> assert(_ == "Hello, world!")

(* seq.take *)
discard
  "Hello, world!  "
  |> seq.take(_, string.length("Hello, world!"))
  |> seq.tostring(_)
  |> assert(_ == "Hello, world!")

discard
  "Hello, Gaya!"
  |> seq.take(_, 0)
  |> seq.tostring(_)
  |> string.isempty(_)
  |> assert(_)

